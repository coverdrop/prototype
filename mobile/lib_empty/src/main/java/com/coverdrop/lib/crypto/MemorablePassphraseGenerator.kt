package com.coverdrop.lib.crypto

import android.content.Context

data class MemorablePassphrase(val value: String)

/**
 * Class for generating and verifying memorable passphrase based on the EFF's large word list.
 *
 * See: https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases (CC-BY)
 */
class MemorablePassphraseGenerator(private val context: Context) {


    /**
     * @return A randomly generated passphrase using the underlying word list
     */
    fun generatePassphrase(numberOfWords: Int = 3): MemorablePassphrase {
        TODO("stub")
    }

    /**
     * Checks if a passphrase could have been generated by this class. This is helpful to detect
     * user errors such as typos without compromising security.
     *
     * @return True iff the passphrase could have been generated by the [generatePassphrase] method.
     */
    fun isValidPassphrase(passphrase: String): Boolean {
        TODO("stub")
    }

    fun isValidPassphrase(passphrase: MemorablePassphrase): Boolean {
        TODO("stub")
    }

    /**
     * @return True iff the two given passphrases are equal after being normalized.
     */
    fun passphrasesMatch(
        passphraseA: String,
        passphraseB: String
    ): Boolean {
        TODO("stub")
    }

    /**
     * Normalizes the given passphrase by (a) removing leading and trailing whitespace and (b) by
     * setting to lower case.
     */
    fun normalize(passphrase: String): MemorablePassphrase {
        TODO("stub")
    }
}

